use v6;
use lib 'lib';
use Test;
use Humming-Bird::Core;
use Humming-Bird::Glue;
use Humming-Bird::Backend;
use Humming-Bird::Middleware;
use Humming-Bird::Advice;
use Humming-Bird::Plugin::DBIish;

try {
    require ::('DBIish');

    CATCH {
        default {
            warn 'DBIish not installed, skipping Humming-Bird::Plugin::DBIish tests.';
            skip-rest;
        }
    }
}

use DBDish::TestMock::Connection;

class TestBackend does Humming-Bird::Backend {
    method listen(&handler) {
        return; # Does nothing
    }
}

lives-ok sub { plugin('DBIish', ['TestMock']); }, 'Does default plugin not die?';
lives-ok sub { plugin('DBIish', 'other-db', ['TestMock']); }, 'Does other-db plugin not die?';\
lives-ok sub { listen(8080, :backend(TestBackend)); }, 'Does plugin register ok?';
ok Humming-Bird::Glue::HTTPAction.^can('db'), 'Did plugin properly run?';
my $action = Humming-Bird::Glue::HTTPAction.new;

ok $action.^can('db')[0].($action);
ok $action.^can('db')[0].($action, 'other-db');
ok $action.^can('db')[0].($action).isa(DBDish::TestMock::Connection);
ok $action.^can('db')[0].($action, 'other-db').isa(DBDish::TestMock::Connection);

done-testing;
